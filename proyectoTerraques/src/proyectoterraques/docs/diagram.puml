@startuml


class proyectoterraques.source.Bank {
- int accountTenNumbers
- String office
- String <u>ENTITY</u>
- String country
- int digitControl
- List<Client> clients
- List<Account> accounts
+ <<Create>> Bank()
+ void getClients()
+ void getAccounts()
+ void newClient()
+ Account newAccount()
+ void removeClient()
+ void removeAccount()
+ void showClient()
+ void showAccount()
+ void loadData()
+ void depositMoney()
+ void withdrawMoney()

}

abstract class proyectoterraques.source.Client {
# String dni
# String name
# String surname
# String address
# String phoneNumber
+ <<Create>> Client(String,String,String,String,String)
+ {abstract}String getDni()
+ {abstract}String getFullname()
+ {abstract}String getFullData()
}

class proyectoterraques.source.ShareholderClient {
+ <<Create>> ShareholderClient(String,String,String,String,String)
+ String getDni()
+ String getFullname()
+ String getFullData()
+ List<DebitAccount> debitAccounts
+ CreditAccount credit_account
}

class proyectoterraques.source.StandardClient {
+ <<Create>> StandardClient(String,String,String,String,String)
+ String getDni()
+ String getFullname()
+ String getFullData()
+ DebitAccount debit_account
}

abstract class proyectoterraques.source.Account {
# String accountNumber
# double amount
# String dni
+ <<Create>> Account(String)
+ {abstract} String getDni()
+ {abstract} String getAccountNumber()
+ {abstract} double getAmount()

}

interface proyectoterraques.source.AccountBalance {
+ void deposit(double)
+ void withdraw(double)


}

interface proyectoterraques.source.ClientManagement {
+boolean addAccount(Account)
+void removeAccount(String)
+void listAccounts()

}

class proyectoterraques.source.DebitAccount {
+ <<Create>> DebitAccount(String)
+ String getAccountNumber()
+ double getAmount()
+ void showAccountData()


}

class proyectoterraques.source.CreditAccount {
# double <u>INTEREST</u>
# double debt
+ <<Create>> CreditAccount(String)
+ String getAccountNumber()
+ double getAmount()
+ double getDebt()
+ void showAccountData()


}

class proyectoterraques.source.FileHandler {
- List<String> lines
+ <<Create>> FileHandler()
+ List<String> loadFileContent(String)
- boolean isPathEmpty(String)
- List<String> readFileContent(String)
+ void clear()
}

class proyectoterraques.exceptions.Exception{

}



class proyectoterraques.exceptions.InvalidCharacterException{
+ <<Create>> InvalidCharacterException(String)
+ <<Create>> NotEnoughMoneyExcepcion(String)


}

proyectoterraques.source.Bank o-- "O..*" proyectoterraques.source.Account : Has
proyectoterraques.source.Bank o-- "O..*" proyectoterraques.source.Client : Has
proyectoterraques.source.Bank o-- "O..*" proyectoterraques.source.AccountBalance : Has
proyectoterraques.source.Bank o-- "O..*" proyectoterraques.source.ClientManagement : Has
proyectoterraques.source.Client <|-- proyectoterraques.source.ShareholderClient
proyectoterraques.source.ClientManagement <|-- proyectoterraques.source.ShareholderClient
proyectoterraques.source.Account <|-- proyectoterraques.source.DebitAccount
proyectoterraques.source.AccountBalance <|-- proyectoterraques.source.DebitAccount
proyectoterraques.source.Client <|-- proyectoterraques.source.StandardClient
proyectoterraques.source.ClientManagement <|-- proyectoterraques.source.StandardClient
proyectoterraques.source.Account <|-- proyectoterraques.source.CreditAccount
proyectoterraques.source.AccountBalance <|-- proyectoterraques.source.CreditAccount
proyectoterraques.source.Bank --> proyectoterraques.source.FileHandler : Uses
proyectoterraques.source.Bank --> proyectoterraques.exceptions.InvalidCharacterException : Uses
proyectoterraques.exceptions.Exception <|-- proyectoterraques.exceptions.InvalidCharacterException
@enduml