@startuml


class Bank {
-private String titular
-private double amount
+ <<Create>> Bank()
+public void deposit(double amount)
+public void withdraw(double amount)
+public String getTitular()
+public void setTitular(String titular)
+public double getCantidad()
+public void setCantidad(double cantidad)
}

abstract class Client {
# String dni
# String name
# String surname
# String address
# String phoneNumber
+ <<Create>> Client(String,String,String,String,String)
+ {abstract}String getDni()
+ {abstract}String getFullname()
+ {abstract}String getFullData()
}

class ShareholderClient {
+ <<Create>> Client(String,String,String,String,String)
+ String getDni()
+ String getFullname()
+ String getFullData()
+ List<DebitAccount> debitAccounts
+ CreditAccount credit_account
}

class StandardClient {
+ <<Create>> Client(String,String,String,String,String)
+ String getDni()
+ String getFullname()
+ String getFullData()
+ DebitAccount debit_account
}

abstract class Account {
# private String accountNumber
# private double amount
+ <<Create>> Account()
+public String getAccountNumber()
+public void setAccountNumber(String)
+public double getAmount()
+public void setAmount(double)
}

interface AccountMethods {
+public void deposit(double amount)
+public void withdraw(double amount)


}

interface ClientMethods {
+void addAccount(Account)
+void removeAccount(String)
+void listAccounts()

}

class DebitAccount {

}

class CreditAccount {

}



@enduml